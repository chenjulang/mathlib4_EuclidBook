/-
Copyright (c) 2024 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import Mathlib.Topology.MetricSpace.Bounded
import Mathlib.Topology.Algebra.Monoid

/-! # Approximate units

An *approximate unit* is a filter `l` such that multiplication on the left (or right) by `m : Œ±`
tends to `ùìù m` along the filter, and additionally `l ‚â† ‚ä•` and `Disjoint l (cobounded Œ±)`.


Examples of approximate units include:

- The trivial approximate unit `pure 1` in a normed ring.
- `ùìù 1` or `ùìù[‚â†] 1` in a normed ring (note that the latter is disjoint from `pure 1`).
- In a C‚ãÜ-algebra, the collection of sections `fun a ‚Ü¶ {x | a ‚â§ x} ‚à© ball 0 1`, where `a`
  ranges over the positive elements of norm strictly less than 1, is a filter basis for an
  approximate unit.

In many cases of interest, an approximate unit is specified by a filter basis with certain
properties, and the filter itself is of less interest. For instance, in the case of non-unital
C‚ãÜ-algebras, the canonical approximate unit is the one derived from the net of nonnegative elements
contained in the unit ball. This set is directed under the natural star order:
`x ‚â§ y ‚Üî ‚àÉ s, y = x + star s * s`. In order to reduce the type class burden, we only require a
bornology on the underlying type.

One reason to help explain why the filter is of less interest than the basis is that there may be
*many* approximate units, and they may even be disjoint! Indeed, in a topological unital magma,
the approximate units are precisely the proper filters contained in `ùìù 1`.
-/

open Filter Topology Bornology

/-- An *approximate unit* is a proper bounded filter (i.e., `‚â† ‚ä•` and disjoint from `cobounded Œ±`)
such that multiplication on the left (and separately on the right) by `m : Œ±` tends to `ùìù m` along
the filter. -/
structure IsApproximateUnit {Œ± : Type*} [TopologicalSpace Œ±] [Mul Œ±] [Bornology Œ±]
    (l : Filter Œ±) : Prop where
  /-- Multiplication on the left by `m` tends to `ùìù m` along the filter. -/
  tendsto_mul_left m : Tendsto (m * ¬∑) l (ùìù m)
  /-- Multiplication on the right by `m` tends to `ùìù m` along the filter. -/
  tendsto_mul_right m : Tendsto (¬∑ * m) l (ùìù m)
  /-- The filter is bounded. -/
  disjoint_cobounded : Disjoint l (cobounded Œ±)
  /-- The filter is not `‚ä•`. -/
  protected [neBot : NeBot l]

namespace IsApproximateUnit

/-- A unital magma with a topology and bornology has the trivial approximate unit `pure 1`. -/
lemma pure_one (Œ± : Type*) [TopologicalSpace Œ±] [MulOneClass Œ±] [Bornology Œ±] :
    IsApproximateUnit (pure (1 : Œ±))  where
  tendsto_mul_left m := by simpa using tendsto_pure_nhds (m * ¬∑) (1 : Œ±)
  tendsto_mul_right m := by simpa using tendsto_pure_nhds (¬∑ * m) (1 : Œ±)
  disjoint_cobounded := Filter.hasBasis_pure 1 |>.disjoint_cobounded_iff.mpr <| by simp

set_option linter.unusedVariables false in
/-- If `l` is an approximate unit and `‚ä• < l' ‚â§ l`, then `l'` is also an approximate
unit. -/
lemma of_le {Œ± : Type*} [TopologicalSpace Œ±] [MulOneClass Œ±] [Bornology Œ±]
    {l l' : Filter Œ±} (hl : IsApproximateUnit l) (hle : l' ‚â§ l) [hl' : l'.NeBot] :
    IsApproximateUnit l' where
  tendsto_mul_left m := hl.tendsto_mul_left m |>.mono_left hle
  tendsto_mul_right m := hl.tendsto_mul_right m |>.mono_left hle
  disjoint_cobounded := hl.disjoint_cobounded.mono_left hle

/-- In a metric space which is a topological unital magma, `ùìù 1` is an approximate unit. -/
lemma nhds_one (Œ± : Type*) [PseudoMetricSpace Œ±] [MulOneClass Œ±]
    [ContinuousMul Œ±] : IsApproximateUnit (ùìù (1 : Œ±)) where
  tendsto_mul_left m := by simpa using tendsto_id (x := ùìù 1) |>.const_mul m
  tendsto_mul_right m := by simpa using tendsto_id (x := ùìù 1) |>.mul_const m
  disjoint_cobounded := Metric.disjoint_nhds_cobounded (1 : Œ±)

/-- In a metric space which is a topological unital magma, `ùìù 1` is the largest approximate unit. -/
lemma iff_neBot_and_le_nhds_one {Œ± : Type*} [PseudoMetricSpace Œ±] [MulOneClass Œ±]
    [ContinuousMul Œ±] {l : Filter Œ±} :
    IsApproximateUnit l ‚Üî l.NeBot ‚àß l ‚â§ ùìù 1 :=
  ‚ü®fun hl ‚Ü¶ ‚ü®hl.neBot, by simpa using hl.tendsto_mul_left 1‚ü©,
    And.elim fun _ hl ‚Ü¶ IsApproximateUnit.nhds_one Œ± |>.of_le hl‚ü©

end IsApproximateUnit
