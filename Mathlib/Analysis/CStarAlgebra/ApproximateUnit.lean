/-
Copyright (c) 2024 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Isometric
import Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Order
import Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.PosPart
import Mathlib.Analysis.SpecialFunctions.ContinuousFunctionalCalculus.Rpow
import Mathlib.Topology.ApproximateUnit

/-! # Positive contractions in a C‚ãÜ-algebra form an approximate unit

This file will show (although it does not yet) that the collection of positive contractions (of norm
strictly less than one) in a possibly non-unital C‚ãÜ-algebra form an approximate unit. The key step
is to show that this set is directed using the continuous functional calculus applied with the
functions `fun x : ‚Ñù‚â•0, 1 - (1 + x)‚Åª¬π` and `fun x : ‚Ñù‚â•0, x * (1 - x)‚Åª¬π`, which are inverses on
the interval `{x : ‚Ñù‚â•0 | x < 1}`.

## Main declarations

+ `CFC.monotoneOn_one_sub_one_add_inv`: the function `f := fun x : ‚Ñù‚â•0, 1 - (1 + x)‚Åª¬π` is
  *operator monotone* on `Set.Ici (0 : A)` (i.e., `cfc‚Çô f` is monotone on `{x : A | 0 ‚â§ x}`).
+ `Set.InvOn.one_sub_one_add_inv`: the functions `f := fun x : ‚Ñù‚â•0, 1 - (1 + x)‚Åª¬π` and
  `g := fun x : ‚Ñù‚â•0, x * (1 - x)‚Åª¬π` are inverses on `{x : ‚Ñù‚â•0 | x < 1}`.
+ `CStarAlgebra.directedOn_nonneg_ball`: the set `{x : A | 0 ‚â§ x} ‚à© Metric.ball 0 1` is directed.

## TODO

+ Prove the approximate identity result by following Ken Davidson's proof in
  "C*-Algebras by Example"

-/

variable {A : Type*} [NonUnitalCStarAlgebra A]

local notation "œÉ‚Çô" => quasispectrum
local notation "œÉ" => spectrum

open Unitization NNReal CStarAlgebra

variable [PartialOrder A] [StarOrderedRing A]

lemma CFC.monotoneOn_one_sub_one_add_inv :
    MonotoneOn (cfc‚Çô (fun x : ‚Ñù‚â•0 ‚Ü¶ 1 - (1 + x)‚Åª¬π)) (Set.Ici (0 : A)) := by
  intro a ha b hb hab
  simp only [Set.mem_Ici] at ha hb
  rw [‚Üê inr_le_iff .., nnreal_cfc‚Çô_eq_cfc_inr a _, nnreal_cfc‚Çô_eq_cfc_inr b _]
  have h_cfc_one_sub (c : A‚Å∫¬π) (hc : 0 ‚â§ c := by cfc_tac) :
      cfc (fun x : ‚Ñù‚â•0 ‚Ü¶ 1 - (1 + x)‚Åª¬π) c = 1 - cfc (¬∑‚Åª¬π : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0) (1 + c) := by
    rw [cfc_tsub _ _ _ (fun x _ ‚Ü¶ by simp) (hg := by fun_prop (disch := intro _ _; positivity)),
      cfc_const_one ‚Ñù‚â•0 c]
    rw [cfc_comp' (¬∑‚Åª¬π) (1 + ¬∑) c ?_, cfc_add .., cfc_const_one ‚Ñù‚â•0 c, cfc_id' ‚Ñù‚â•0 c]
    refine continuousOn_id.inv‚ÇÄ ?_
    rintro - ‚ü®x, -, rfl‚ü©
    simp only [id_def]
    positivity
  rw [‚Üê inr_le_iff a b (.of_nonneg ha) (.of_nonneg hb)] at hab
  rw [‚Üê inr_nonneg_iff] at ha hb
  rw [h_cfc_one_sub (a : A‚Å∫¬π), h_cfc_one_sub (b : A‚Å∫¬π)]
  gcongr
  rw [‚Üê CFC.rpow_neg_one_eq_cfc_inv, ‚Üê CFC.rpow_neg_one_eq_cfc_inv]
  exact rpow_neg_one_le_rpow_neg_one (add_nonneg zero_le_one ha) (by gcongr) <|
    isUnit_of_le isUnit_one zero_le_one <| le_add_of_nonneg_right ha

lemma Set.InvOn.one_sub_one_add_inv : Set.InvOn (fun x ‚Ü¶ 1 - (1 + x)‚Åª¬π) (fun x ‚Ü¶ x * (1 - x)‚Åª¬π)
    {x : ‚Ñù‚â•0 | x < 1} {x : ‚Ñù‚â•0 | x < 1} := by
  have h1_add {x : ‚Ñù‚â•0} : 0 < 1 + (x : ‚Ñù) := by positivity
  have : (fun x : ‚Ñù‚â•0 ‚Ü¶ x * (1 + x)‚Åª¬π) = fun x ‚Ü¶ 1 - (1 + x)‚Åª¬π := by
    ext x
    field_simp
    simp [sub_mul, inv_mul_cancel‚ÇÄ h1_add.ne']
  rw [‚Üê this]
  constructor
  all_goals intro x (hx : x < 1)
  ¬∑ have : 0 < 1 - x := tsub_pos_of_lt hx
    field_simp [tsub_add_cancel_of_le hx.le, tsub_tsub_cancel_of_le hx.le]
  ¬∑ field_simp [mul_tsub]

lemma norm_cfc‚Çô_one_sub_one_add_inv_lt_one (a : A) :
    ‚Äñcfc‚Çô (fun x : ‚Ñù‚â•0 ‚Ü¶ 1 - (1 + x)‚Åª¬π) a‚Äñ < 1 :=
  nnnorm_cfc‚Çô_nnreal_lt fun x _ ‚Ü¶ tsub_lt_self zero_lt_one (by positivity)

-- the calls to `fun_prop` with a discharger set off the linter
set_option linter.style.multiGoal false in
lemma CStarAlgebra.directedOn_nonneg_ball :
    DirectedOn (¬∑ ‚â§ ¬∑) ({x : A | 0 ‚â§ x} ‚à© Metric.ball 0 1) := by
  let f : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0 := fun x => 1 - (1 + x)‚Åª¬π
  let g : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0 := fun x => x * (1 - x)‚Åª¬π
  suffices ‚àÄ a b : A, 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí ‚Äña‚Äñ < 1 ‚Üí ‚Äñb‚Äñ < 1 ‚Üí
      a ‚â§ cfc‚Çô f (cfc‚Çô g a + cfc‚Çô g b) by
    rintro a ‚ü®(ha‚ÇÅ : 0 ‚â§ a), ha‚ÇÇ‚ü© b ‚ü®(hb‚ÇÅ : 0 ‚â§ b), hb‚ÇÇ‚ü©
    simp only [Metric.mem_ball, dist_zero_right] at ha‚ÇÇ hb‚ÇÇ
    refine ‚ü®cfc‚Çô f (cfc‚Çô g a + cfc‚Çô g b), ‚ü®by simp, ?_‚ü©, ?_, ?_‚ü©
    ¬∑ simpa only [Metric.mem_ball, dist_zero_right] using norm_cfc‚Çô_one_sub_one_add_inv_lt_one _
    ¬∑ exact this a b ha‚ÇÅ hb‚ÇÅ ha‚ÇÇ hb‚ÇÇ
    ¬∑ exact add_comm (cfc‚Çô g a) (cfc‚Çô g b) ‚ñ∏ this b a hb‚ÇÅ ha‚ÇÅ hb‚ÇÇ ha‚ÇÇ
  rintro a b ha‚ÇÅ - ha‚ÇÇ -
  calc
    a = cfc‚Çô (f ‚àò g) a := by
      conv_lhs => rw [‚Üê cfc‚Çô_id ‚Ñù‚â•0 a]
      refine cfc‚Çô_congr (Set.InvOn.one_sub_one_add_inv.1.eqOn.symm.mono fun x hx ‚Ü¶ ?_)
      exact lt_of_le_of_lt (le_nnnorm_of_mem_quasispectrum hx) ha‚ÇÇ
    _ = cfc‚Çô f (cfc‚Çô g a) := by
      rw [cfc‚Çô_comp f g a ?_ (by simp [f, tsub_self]) ?_ (by simp [g]) ha‚ÇÅ]
      ¬∑ fun_prop (disch := intro _ _; positivity)
      ¬∑ have (x) (hx : x ‚àà œÉ‚Çô ‚Ñù‚â•0 a) :  1 - x ‚â† 0 := by
          refine tsub_pos_of_lt ?_ |>.ne'
          exact lt_of_le_of_lt (le_nnnorm_of_mem_quasispectrum hx) ha‚ÇÇ
        fun_prop (disch := assumption)
    _ ‚â§ cfc‚Çô f (cfc‚Çô g a + cfc‚Çô g b) := by
      have hab' : cfc‚Çô g a ‚â§ cfc‚Çô g a + cfc‚Çô g b := le_add_of_nonneg_right cfc‚Çô_nonneg_of_predicate
      exact CFC.monotoneOn_one_sub_one_add_inv cfc‚Çô_nonneg_of_predicate
        (cfc‚Çô_nonneg_of_predicate.trans hab') hab'

section NormedGroup

variable {E : Type*} [NormedGroup E]

@[to_additive]
theorem eq_one_or_norm_pos (a : E) : a = 1 ‚à® 0 < ‚Äña‚Äñ := by
  by_cases h : a = 1
  ¬∑ exact Or.inl h
  ¬∑ apply Or.inr
    simpa [‚Üê norm_pos_iff''] using h

@[to_additive]
theorem eq_one_or_nnnorm_pos (a : E) : a = 1 ‚à® 0 < ‚Äña‚Äñ‚Çä :=
  eq_one_or_norm_pos a

end NormedGroup

section SpanNonneg

open Submodule

/-- A C‚ãÜ-algebra is spanned by nonnegative elements of norm at most `r` -/
lemma CStarAlgebra.span_nonneg_inter_closedBall {r : ‚Ñù} (hr : 0 < r) :
    span ‚ÑÇ ({x : A | 0 ‚â§ x} ‚à© Metric.closedBall 0 r) = ‚ä§ := by
  rw [eq_top_iff, ‚Üê span_nonneg, span_le]
  intro x hx
  obtain (rfl | hx_pos) := eq_zero_or_norm_pos x
  ¬∑ exact zero_mem _
  ¬∑ suffices (r * ‚Äñx‚Äñ‚Åª¬π : ‚ÑÇ)‚Åª¬π ‚Ä¢ ((r * ‚Äñx‚Äñ‚Åª¬π : ‚ÑÇ) ‚Ä¢ x) = x by
      rw [‚Üê this]
      refine smul_mem _ _ (subset_span <| Set.mem_inter ?_ ?_)
      ¬∑ norm_cast
        exact smul_nonneg (by positivity) hx
      ¬∑ simp [mul_smul, norm_smul, abs_of_pos hr, inv_mul_cancel‚ÇÄ hx_pos.ne']
    apply inv_smul_smul‚ÇÄ
    norm_cast
    positivity

/-- A C‚ãÜ-algebra is spanned by nonnegative elements of norm less than `r`. -/
lemma CStarAlgebra.span_nonneg_inter_ball {r : ‚Ñù} (hr : 0 < r) :
    span ‚ÑÇ ({x : A | 0 ‚â§ x} ‚à© Metric.ball 0 r) = ‚ä§ := by
  rw [eq_top_iff, ‚Üê span_nonneg_inter_closedBall (half_pos hr)]
  gcongr
  exact Metric.closedBall_subset_ball <| half_lt_self hr

/-- A C‚ãÜ-algebra is spanned by nonnegative contractions. -/
lemma CStarAlgebra.span_nonneg_inter_unitClosedBall :
    span ‚ÑÇ ({x : A | 0 ‚â§ x} ‚à© Metric.closedBall 0 1) = ‚ä§ :=
  CStarAlgebra.span_nonneg_inter_closedBall zero_lt_one

/-- A C‚ãÜ-algebra is spanned by nonnegative strict contractions. -/
lemma CStarAlgebra.span_nonneg_inter_unitBall :
    span ‚ÑÇ ({x : A | 0 ‚â§ x} ‚à© Metric.ball 0 1) = ‚ä§ :=
  CStarAlgebra.span_nonneg_inter_ball zero_lt_one

end SpanNonneg

section ApproximateUnit

open Metric

/-- An *increasing approximate unit* in a C‚ãÜ-algebra is an approximate unit whose basis consists of
sets in the closed unit ball of nonnegative elements. -/
structure IncreasingApproximateUnit {Œπ : Type*} (p : Œπ ‚Üí Prop) (s : Œπ ‚Üí Set A) extends
    ApproximateUnit p s where
  nonneg' (i : Œπ) (hi : p i) : s i ‚äÜ {x | 0 ‚â§ x}
  subset_closedBall (i : Œπ) (hi : p i) : s i ‚äÜ closedBall 0 1

open Submodule Filter Topology in
abbrev IncreasingApproximateUnit.of_forall_nonneg_tendsto {Œπ : Type*} {l : Filter A} {p : Œπ ‚Üí Prop}
    {s : Œπ ‚Üí Set A} (hl : l.HasBasis p s) (hs : ‚àÄ i, p i ‚Üí s i ‚äÜ {x | 0 ‚â§ x} ‚à© closedBall 0 1)
    (hs_nonempty : ‚àÄ i, p i ‚Üí (s i).Nonempty) (h : ‚àÄ m, 0 ‚â§ m ‚Üí ‚Äñm‚Äñ < 1 ‚Üí Tendsto (¬∑ * m) l (ùìù m)) :
    IncreasingApproximateUnit p s where
  toFilter := l
  toHasBasis := hl
  bounded := ‚ü®closedBall 0 1, isBounded_closedBall, (hs ¬∑ ¬∑ |>.trans Set.inter_subset_right)‚ü©
  nonneg' i hi := (hs i hi).trans Set.inter_subset_left
  subset_closedBall i hi := (hs i hi).trans Set.inter_subset_right
  neBot := hl.neBot_iff.mpr <| hs_nonempty _
  filter_le := by
    rw [mulLeftRightTendsto.le_iff, forall_and]
    refine and_iff_left_of_imp (fun h_left a ‚Ü¶ ?_) |>.mpr fun a ‚Ü¶ ?_
    ¬∑ apply (star_star a ‚ñ∏ (continuous_star.tendsto _ |>.comp <| h_left (star a))).congr'
      obtain ‚ü®i, hi‚ü© := hl.ex_mem
      filter_upwards [hl.mem_of_mem hi] with x hx
      simp [IsSelfAdjoint.star_eq (.of_nonneg (hs i hi hx).1)]
    ¬∑ obtain ‚ü®n, c, x, rfl‚ü© := mem_span_set'.mp <| by
        show a ‚àà span ‚ÑÇ ({x | 0 ‚â§ x} ‚à© ball 0 1)
        simp [CStarAlgebra.span_nonneg_inter_unitBall]
      simp_rw [Finset.mul_sum]
      refine tendsto_finset_sum _ fun i _ ‚Ü¶ ?_
      simp_rw [mul_smul_comm]
      exact tendsto_const_nhds.smul <| h (x i) (x i).2.1 <| by simpa using (x i).2.2

lemma CStarAlgebra.pow_nonneg
    {A : Type*} [CStarAlgebra A] [PartialOrder A] [StarOrderedRing A]
    {a : A} (ha : 0 ‚â§ a) (n : ‚Ñï) : 0 ‚â§ a ^ n := by
  rw [‚Üê cfc_pow_id (R := ‚Ñù‚â•0) a]
  exact cfc_nonneg_of_predicate

lemma CStarAlgebra.pow_monotone_of_one_le
    {A : Type*} [CStarAlgebra A] [PartialOrder A] [StarOrderedRing A]
    {a : A} (ha : 1 ‚â§ a) : Monotone (a ^ ¬∑ : ‚Ñï ‚Üí A) := by
  have ha' : 0 ‚â§ a := zero_le_one.trans ha
  intro n m hnm
  simp only
  rw [‚Üê cfc_pow_id (R := ‚Ñù) a, ‚Üê cfc_pow_id (R := ‚Ñù) a, cfc_le_iff ..]
  rw [CFC.one_le_iff (R := ‚Ñù) a] at ha
  peel ha with x hx _
  exact pow_le_pow_right‚ÇÄ (ha x hx) hnm

lemma CStarAlgebra.pow_antitone_of_le_one
    {A : Type*} [CStarAlgebra A] [PartialOrder A] [StarOrderedRing A]
    {a : A} (ha‚ÇÄ : 0 ‚â§ a) (ha‚ÇÅ : a ‚â§ 1) : Antitone (a ^ ¬∑ : ‚Ñï ‚Üí A) := by
  intro n m hnm
  simp only
  rw [‚Üê cfc_pow_id (R := ‚Ñù) a, ‚Üê cfc_pow_id (R := ‚Ñù) a, cfc_le_iff ..]
  rw [CFC.le_one_iff (R := ‚Ñù) a] at ha‚ÇÅ
  peel ha‚ÇÅ with x hx _
  exact pow_le_pow_of_le_one (spectrum_nonneg_of_nonneg ha‚ÇÄ hx) (ha‚ÇÅ x hx) hnm

theorem CStarAlgebra.nnnorm_le_nnnorm_of_nonneg_of_le
    {A : Type u_1} [NonUnitalCStarAlgebra A] [PartialOrder A] [StarOrderedRing A]
    {a : A} {b : A} (ha : 0 ‚â§ a := by cfc_tac) (hab : a ‚â§ b) :
    ‚Äña‚Äñ‚Çä ‚â§ ‚Äñb‚Äñ‚Çä :=
  norm_le_norm_of_nonneg_of_le ha hab

theorem CStarAlgebra.extracted
    {A : Type*} [NonUnitalCStarAlgebra A] [PartialOrder A] [StarOrderedRing A]
    (x : A) (hx‚ÇÅ : 0 ‚â§ x) (hx‚ÇÇ : ‚Äñx‚Äñ < 1) (Œµ : ‚Ñù) (hŒµ : 0 < Œµ) (b : A) (hb‚ÇÅ : 0 ‚â§ b)
    (hb‚ÇÇ : b ‚àà ball 0 1) (hb‚ÇÉ : cfc‚Çô (fun y : ‚Ñù‚â•0 ‚Ü¶ 1 - (1 + y)‚Åª¬π) (Œµ‚Åª¬π ^ 2 ‚Ä¢ x) ‚â§ b) :
    ‚Äñstar (x : A‚Å∫¬π) * ((1 - b) * (1 - b)) * x‚Äñ ‚â§ Œµ ^ 2 := by
  set g : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0 := fun y ‚Ü¶ 1 - (1 + y)‚Åª¬π
  have hg : Continuous g := by
    rw [continuous_iff_continuousOn_univ]
    fun_prop (disch := intro _ _; positivity)
  simp only [mem_ball, dist_zero_right] at hb‚ÇÇ
  rw [‚Üê norm_inr (ùïú := ‚ÑÇ)] at hx‚ÇÇ hb‚ÇÇ
  rw [‚Üê Unitization.inr_le_iff _ _ (.of_nonneg cfc‚Çô_nonneg_of_predicate) (.of_nonneg hb‚ÇÅ),
    Unitization.nnreal_cfc‚Çô_eq_cfc_inr _ _ (by simp [g, tsub_self]), inr_smul] at hb‚ÇÉ
  rw [‚Üê Unitization.inr_nonneg_iff] at hx‚ÇÅ hb‚ÇÅ
  generalize (x : A‚Å∫¬π) = x, (b : A‚Å∫¬π) = b at hx‚ÇÅ hx‚ÇÇ hb‚ÇÅ hb‚ÇÇ hb‚ÇÉ
  rw [‚Üê sq]
  have hx‚ÇÉ := norm_le_one_iff_of_nonneg x |>.mp hx‚ÇÇ.le
  have hb‚ÇÑ := norm_le_one_iff_of_nonneg b |>.mp hb‚ÇÇ.le
  rw [‚Üê sub_nonneg] at hb‚ÇÑ
  lift Œµ to ‚Ñù‚â•0 using hŒµ.le
  rw [‚Üê coe_nnnorm]
  norm_cast at hŒµ hb‚ÇÉ ‚ä¢
  rw [‚Üê NNReal.smul_def] at hb‚ÇÉ
  have hg' : ContinuousOn (fun y ‚Ü¶ (1 + Œµ‚Åª¬π ^ 2 * y)‚Åª¬π) (spectrum ‚Ñù‚â•0 x) :=
    ContinuousOn.inv‚ÇÄ (by fun_prop) fun _ _ ‚Ü¶ by positivity
  have : star x * (1 - b) ^ 2 * x ‚â§ cfc (fun y ‚Ü¶ y * (1 + Œµ‚Åª¬π ^ 2 * y)‚Åª¬π * y) x := calc
    star x * (1 - b) ^ 2 * x ‚â§ star x * (1 - b) * x := by
      refine conjugate_le_conjugate ?_ _
      simpa using pow_antitone_of_le_one hb‚ÇÑ (sub_le_self 1 hb‚ÇÅ) one_le_two
    _ ‚â§ star x * (1 - cfc g (Œµ‚Åª¬π ^ 2 ‚Ä¢ x)) * x := conjugate_le_conjugate (by gcongr) _
    _ = cfc (fun y ‚Ü¶ y * (1 + Œµ‚Åª¬π ^ 2 * y)‚Åª¬π * y) x := by
      rw [cfc_mul _ _ x (continuousOn_id' _ |>.mul hg') (continuousOn_id' _),
        cfc_mul _ _ x (continuousOn_id' _) hg', cfc_id' .., IsSelfAdjoint.star_eq (.of_nonneg hx‚ÇÅ)]
      congr
      rw [‚Üê cfc_one (R := ‚Ñù‚â•0) x, ‚Üê cfc_comp_smul _ _ _ hg.continuousOn hx‚ÇÅ,
        ‚Üê cfc_tsub _ _ x (by simp [g]) hx‚ÇÅ (by fun_prop) (Continuous.continuousOn <| by fun_prop)]
      refine cfc_congr (fun y _ ‚Ü¶ ?_)
      simp [g, tsub_tsub_cancel_of_le]
  apply nnnorm_le_nnnorm_of_nonneg_of_le (conjugate_nonneg (pow_nonneg hb‚ÇÑ 2) x) this |>.trans
  refine nnnorm_cfc_nnreal_le fun y hy ‚Ü¶ ?_
  field_simp
  calc
    y * Œµ ^ 2 * y / (Œµ ^ 2 + y) ‚â§ Œµ ^ 2 * 1 := by
      rw [mul_div_assoc]
      gcongr
      ¬∑ refine mul_le_of_le_one_left (zero_le _) ?_
        rw [‚Üê cfc_id' ‚Ñù‚â•0 x, ‚Üê cfc_one (R := ‚Ñù‚â•0) x,
          cfc_nnreal_le_iff _ _ _ (QuasispectrumRestricts.nnreal_of_nonneg hx‚ÇÅ)] at hx‚ÇÉ
        exact hx‚ÇÉ y hy
      ¬∑ exact div_le_one (by positivity) |>.mpr le_add_self
    _ = Œµ ^ 2 := mul_one _

open Metric Set Unitization in
/-- the approximate unit in a C‚ãÜ-algebra consisting of positive contractions of norm strictly
less than 1. -/
def CStarAlgebra.increasingApproximateUnit : IncreasingApproximateUnit
    (¬∑ ‚àà {x : A | 0 ‚â§ x} ‚à© ball 0 1) ({x | ¬∑ ‚â§ x} ‚à© ({x | 0 ‚â§ x} ‚à© ball 0 1)) :=
  have basis := directedOn_nonneg_ball (A := A) |>.filterIsBasis ‚ü®0, by simp‚ü© |>.hasBasis
  .of_forall_nonneg_tendsto basis
    (fun _ _ ‚Ü¶ inter_subset_right.trans <| inter_subset_inter_right _ ball_subset_closedBall)
    (‚ü®¬∑, Set.mem_inter le_rfl ¬∑‚ü©) fun x hx‚ÇÅ hx‚ÇÇ ‚Ü¶ by
      rw [basis.tendsto_iff nhds_basis_closedBall]
      intro Œµ hŒµ
      refine ‚ü®cfc‚Çô (fun y : ‚Ñù‚â•0 ‚Ü¶ 1 - (1 + y)‚Åª¬π) (Œµ‚Åª¬π ^ 2 ‚Ä¢ x),
        Set.mem_inter cfc‚Çô_nonneg_of_predicate (by simpa [- inv_pow, mem_closedBall_iff_norm]
          using norm_cfc‚Çô_one_sub_one_add_inv_lt_one _ (smul_nonneg (by positivity) hx‚ÇÅ)), ?_‚ü©
      rintro b ‚ü®(hb‚ÇÅ : cfc‚Çô _ _ ‚â§ _), (hb‚ÇÇ : 0 ‚â§ b), hb‚ÇÉ‚ü©
      rw [mem_closedBall_iff_norm, ‚Üê norm_inr (ùïú := ‚ÑÇ), inr_sub, inr_mul, norm_sub_rev]
      nth_rw 1 [‚Üê one_mul (x : A‚Å∫¬π)]
      rw [‚Üê sub_mul]
      refine abs_le_of_sq_le_sq' ?_ (by positivity) |>.2
      rw [sq, ‚Üê CStarRing.norm_star_mul_self, star_mul, ‚Üê mul_assoc, mul_assoc (star _),
        (IsSelfAdjoint.one A‚Å∫¬π |>.sub <| (IsSelfAdjoint.of_nonneg hb‚ÇÇ).inr _).star_eq]
      exact extracted x hx‚ÇÅ hx‚ÇÇ Œµ hŒµ b hb‚ÇÇ hb‚ÇÉ hb‚ÇÅ


end ApproximateUnit
